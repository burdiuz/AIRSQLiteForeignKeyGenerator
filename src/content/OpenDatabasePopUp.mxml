<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" title.open="Open Database" title.create="Create Database" width="400" height="285" creationComplete="creationCompleteHandler(event)" removedFromStage="removedFromStageHandler(event)" xmlns:content="content.*" xmlns:components="aw.components.*">
	<fx:Metadata>
		[Event(name="close", type="flash.events.Event")]
		[Event(name="complete", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import aw.data.DatabaseInfo;
			import aw.data.SQLResources;
			
			import commands.CreateDatabaseCommand;
			import commands.OpenDatabaseCommand;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			static private var _instance:OpenDatabasePopUp;
			private var _file:File;
			[Bindable]
			public var fileSelected:Boolean;
			protected function creationCompleteHandler(event:FlexEvent):void{
				if(this.stage){
					this.stage.addEventListener(Event.RESIZE, this.resizeHandler);
				}
				this.resizeHandler(null);
			}
			private function resizeHandler(event:Event):void{
				PopUpManager.centerPopUp(this);
			}
			
			protected function removedFromStageHandler(event:Event):void{
				if(this.stage){
					this.stage.removeEventListener(Event.RESIZE, this.resizeHandler);
				}
			}
			static public function display(create:Boolean=false):OpenDatabasePopUp{
				if(!_instance){
					const panel:OpenDatabasePopUp = new OpenDatabasePopUp();
					panel.currentState = create ? "create" : "open";
					PopUpManager.addPopUp(panel, SQLiteForeignKeyGenerator.instance, true);
					_instance = panel;
				}
				return panel;
			}
			public function close():void{
				_instance = null;
				PopUpManager.removePopUp(this);
				this.dispatchEvent(new Event(Event.CLOSE));
			}
			protected function openButton_clickHandler(event:MouseEvent):void{
				var cmd:OpenDatabaseCommand = new OpenDatabaseCommand();
				try{
					var key:ByteArray = encView.encryptionKey;
				}catch(error:Error){
					Alert.show(error.message, "Warning");
					return;
				}
				if(cmd.open(this._file, false, DatabaseInfo.DEFAULT_PAGE_SIZE, key)){
					close();
				}
			}
			protected function createButton_clickHandler(event:MouseEvent):void{
				var cmd:CreateDatabaseCommand = new CreateDatabaseCommand();
				try{
					var key:ByteArray = encView.encryptionKey;
				}catch(error:Error){
					Alert.show(error.message, "Warning");
					return;
				}
				if(cmd.create(this._file, autoCompactCheckBox.selected, pageSizeDropDown.selectedItem, key)){
					close();
				}
			}
			protected function browseButton_clickHandler(event:MouseEvent):void{
				this._file = File.userDirectory.clone();
				this._file.addEventListener(Event.CANCEL, this.fileCancelHandler);
				this._file.addEventListener(Event.SELECT, this.fileSelectHandler);
				switch(currentState){
					case "open":
						this._file.browseForOpen("Select Database file", Settings.instance.getFileFilters());
						break;
					case "create":
						this._file.browseForSave("Select destination folder and file name for DataBase");
						break;
				}
			}
			private function fileCancelHandler(event:Event=null):void{
				this._file.removeEventListener(Event.CANCEL, this.fileCancelHandler);
				this._file.removeEventListener(Event.SELECT, this.fileSelectHandler);
			}
			private function fileSelectHandler(event:Event):void{
				this.fileCancelHandler();
				this.fileInput.text = _file.nativePath;
				this.fileSelected = true;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:states>
		<s:State name="open"/>
		<s:State name="create"/>
	</s:states>
	<s:layout>
		<s:VerticalLayout paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5"/>
	</s:layout>
	<s:HGroup width="100%" verticalAlign="middle">
		<components:PathText id="fileInput" width="100%"/>
		<s:Button label="Browse" click="browseButton_clickHandler(event)"/>
	</s:HGroup>
	<content:EncryptionKeyView id="encView" enablePasswordGenerator.create="true"/>
	<s:HGroup width="100%" verticalAlign="middle" includeIn="create">
		<s:Label text="Page size:"/>
		<s:DropDownList id="pageSizeDropDown" dataProvider="{new ArrayList([512, 1024, 2048, 4096, 8192, 16384, 32768, 65536])}" selectedIndex="1"/>
		<s:Spacer width="25"/>
		<s:CheckBox id="autoCompactCheckBox" label="Automatically compact" includeIn="create"/>
	</s:HGroup>
	<s:Spacer height="100%"/>
	<s:HGroup width="100%" horizontalAlign="right">
		<s:Button label.open="Open" label.create="Create" click.open="openButton_clickHandler(event)" click.create="createButton_clickHandler(event)" enabled="{fileSelected}"/>
		<s:Button label="Cancel" click="close();"/>
	</s:HGroup>
</s:Panel>
