<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height.loading="100" height="250" title="Please, resolve missing Databases" creationComplete="creationCompleteHandler(event)" removedFromStage="removedFromStageHandler(event)" stateChangeComplete="stateChangeCompleteHandler(event)">
	<fx:Metadata>
		[Event(name="databaseConfigurationLoaded", type="events.DatabaseConfigurationEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import aw.data.SQLConnectionConfiguration;
			import aw.data.DatabaseInfo;
			import events.DatabaseConfigurationEvent;
			import events.ItemEvent;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			[Bindable]
			private var _list:ArrayList;
			private var _loadFile:File;
			
			static public function display():LoadDBResolvePathsPopUp{
				const panel:LoadDBResolvePathsPopUp = new LoadDBResolvePathsPopUp();
				PopUpManager.addPopUp(panel, SQLiteForeignKeyGenerator.instance, true);
				return panel;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void{
				if(this.stage){
					this.stage.addEventListener(Event.RESIZE, this.resizeHandler);
				}
				this.resizeHandler(null);
				this._loadFile = File.documentsDirectory;
				this._loadFile.addEventListener(Event.SELECT, this.loadFileSelectHandler);
				this._loadFile.addEventListener(Event.CANCEL, this.loadFileCancelHandler);
				this._loadFile.browseForOpen("Open Database connections configuration file", [SQLConnectionConfiguration.FILE_FILTER]);
			}
			private function resizeHandler(event:Event):void{
				PopUpManager.centerPopUp(this);
			}
			
			protected function removedFromStageHandler(event:Event):void{
				if(this.stage){
					this.stage.removeEventListener(Event.RESIZE, this.resizeHandler);
				}
			}
			private function loadFileSelectHandler(event:Event):void{
				this._loadFile.removeEventListener(Event.SELECT, this.loadFileSelectHandler);
				try{
					var list:Array = SQLConnectionConfiguration.load(this._loadFile);
				}catch(ioError:IOError){
					this.close();
					Alert.show("Can't read file, verify if you have adequate permissions to open it.", "Error reading file");
					
				}catch(error:Error){
					this.close();
					Alert.show("Unexpected error occured while processing this file.", "Error processing file");
				}
				if(list.length){
					this._list = new ArrayList(list);
					this.currentState = "resolving";
				}else{
					this.close();
					Alert.show("Configuration file has inproper format and cannot be loaded.", "Error processing file");
				}
				this.loadButton_clickHandler(null, false);
			}
			private function loadFileCancelHandler(event:Event):void{
				this.close();
			}
			
			protected function loadButton_clickHandler(event:MouseEvent, alert:Boolean=true):void{
				var list:Array = this._list.source;
				for each(var info:DatabaseInfo in list){
					if(!info.file || !info.file.exists || info.file.isDirectory){
						if(alert) Alert.show("All Database files should be available before loading.", "Warning");
						return;
					}
				}
				this.dispatchEvent(new DatabaseConfigurationEvent(DatabaseConfigurationEvent.DATABASE_CONFIGURATION_LOADED, false, false, list));
				this.close();
			}
			
			protected function closeButton_clickHandler(event:MouseEvent):void{
				this.close();
			}
			public function close():void{
				PopUpManager.removePopUp(this);
			}
			
			protected function stateChangeCompleteHandler(event:FlexEvent):void{
				this.resizeHandler(null);
			}
			
			protected function grid_creationCompleteHandler(event:FlexEvent):void{
				this.grid.addEventListener(ItemEvent.ITEM_DELETE, this.gridItemDeleteHandler);
			}
			private function gridItemDeleteHandler(event:ItemEvent):void{
				this._list.removeItem(event.item);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5"/>
	</s:layout>
	<s:states>
		<s:State name="loading"/>
		<s:State name="resolving"/>
	</s:states>
	<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" includeIn="loading">
		<s:Label text="Waiting for file being selected..."/>
	</s:VGroup>
	<s:DataGrid id="grid" dataProvider="{_list}" width="100%" height="100%" includeIn="resolving" creationComplete="grid_creationCompleteHandler(event)">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="name" headerText="Name" width="100" itemRenderer="itemrenderers.DatabaseNameItemRenderer"/>
				<s:GridColumn dataField="file" headerText="Database file" rendererIsEditable="true" itemRenderer="itemrenderers.DatabaseFileItemRenderer"/>
				<s:GridColumn headerText="" rendererIsEditable="false" width="20" minWidth="20" maxWidth="20" itemRenderer="itemrenderers.DatabaseDeleteItemRenderer" />
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:HGroup width="100%" horizontalAlign="right">
		<s:Button label="Load" click="loadButton_clickHandler(event)" toolTip="Load resolved Databases" includeIn="resolving"/>
		<s:Spacer width="15"/>
		<s:Button label="Cancel" click="closeButton_clickHandler(event)" toolTip="Cancel load"/>
	</s:HGroup>
</s:Panel>
