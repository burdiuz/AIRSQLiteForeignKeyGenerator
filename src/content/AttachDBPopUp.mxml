<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" title="Attach Database" width="400" height="280" creationComplete="creationCompleteHandler(event)" removedFromStage="removedFromStageHandler(event)" xmlns:content="content.*">
	<fx:Script>
		<![CDATA[
			import aw.data.DatabaseInfo;
			import aw.data.SQLResources;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import vos2.TestBindableFieldsVO;
			import vos2.TestBindablePropertiesVO;
			
			private var _file:File;
			private var _lastDatabase:DatabaseInfo;
			private var _encryptionKey:ByteArray;
			
			public var fields:TestBindableFieldsVO = new TestBindableFieldsVO();
			public var properties:TestBindablePropertiesVO = new TestBindablePropertiesVO();
			
			static public function display():AttachDBPopUp{
				const panel:AttachDBPopUp = new AttachDBPopUp();
				PopUpManager.addPopUp(panel, SQLiteForeignKeyGenerator.instance, true);
				return panel;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void{
				if(this.stage){
					this.stage.addEventListener(Event.RESIZE, this.resizeHandler);
				}
				this.resizeHandler(null);
			}
			private function resizeHandler(event:Event):void{
				PopUpManager.centerPopUp(this);
			}
			
			protected function removedFromStageHandler(event:Event):void{
				if(this.stage){
					this.stage.removeEventListener(Event.RESIZE, this.resizeHandler);
				}
			}
			private function prepareDatabaseInfo():Boolean{
				var name:String = this.nameInput.text;
				if(SQLResources.instance.getDatabase(name)){
					Alert.show("Database name \""+name+"\" already in use. Database names should be unique.", "Warning");
					return false;
				}
				try{
					this._encryptionKey = this.encView.encryptionKey;
				}catch(error:Error){
					Alert.show(error.message);
					return false;
				}
				return true;
			}
			protected function attachDBButton_clickHandler(event:MouseEvent):void{
				if(!this.prepareDatabaseInfo()) return;
				this._file = new File();
				this._file.addEventListener(Event.SELECT, this.attachFileSelectHandler);
				this._file.addEventListener(Event.CANCEL, this.attachFileCancelHandler);
				this._file.browseForOpen("Select DataBase file", Settings.instance.getFileFilters());
			}
			
			protected function createDBButton_clickHandler(event:MouseEvent):void{
				if(!this.prepareDatabaseInfo()) return;
				this._file = File.userDirectory.resolvePath((this.nameInput.text ? this.nameInput.text : "default")+".sqlite");
				this._file.addEventListener(Event.SELECT, this.attachCreateFileSelectHandler);
				this._file.addEventListener(Event.CANCEL, this.attachFileCancelHandler);
				this._file.browseForSave("Select destination folder and file name for DataBase");
			}
			protected function attachCreateFileSelectHandler(event:Event):void{
				var error:Boolean = false;
				try{
					if(SQLResources.createDatabaseFile(this._file, this._encryptionKey)){
						if(this.attachFileSelectHandler(null)){
							setTimeout(SQLExecuteWindow.display, 250, this._lastDatabase);
						}
					}else error = true;
				}catch(error:IOError){
					Alert.show("Can't read file, verify if you have adequate permissions to open it.", "Error reading file");
				}catch(error:Error){
					error = true;
				}
				if(error){
					Alert.show("Database was not created due to unexpected error.", "Error");
				}
			}
			protected function attachFileSelectHandler(event:Event):Boolean{
				var name:String = this.nameInput.text;
				if(!name){
					name = this._file.name.substr(0, this._file.name.length-(this._file.extension && this._file.extension.length ? this._file.extension.length+1 : 0));
					if(SQLResources.instance.getDatabase(name)){
						Alert.show("Database name \""+name+"\" already in use. Database names should be unique. \nPlease, enter database name into \"Name\" field and select this file again.", "Warning");
						return false;
					}
				}
				var success:Boolean = true;
				if(SQLResources.instance.attach(name, this._file, this._encryptionKey)) this._lastDatabase = SQLResources.instance.getDatabase(name);
				else{
					Alert.show("Database was not attached due to unexpected error.", "Error");
					success = false;
				}
				this.attachFileCancelHandler(null);
				this.closeButton_clickHandler(null);
				return success;
			}
			
			protected function attachFileCancelHandler(event:Event):void{
				if(this._file){
					this._file.removeEventListener(Event.SELECT, this.attachFileSelectHandler);
					this._file.removeEventListener(Event.CANCEL, this.attachFileCancelHandler);
				}
				this._file = null;
			}
			
			protected function closeButton_clickHandler(event:MouseEvent):void{
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5" />
	</s:layout>
	<s:HGroup width="100%" verticalAlign="middle">
		<s:Label text="Name:"/>
		<s:TextInput id="nameInput" width="100%" prompt="Enter Database name..." restrict="0-9a-zA-Z_$@#-.,;:&amp;"/>
	</s:HGroup>
	<s:Label text="* Note, database name should be unique within current connection. Database names &quot;main&quot; and &quot;temp&quot; reserved and cannot be used. If database name was not specified, file name (excluding file extension information) will be used." fontSize="9" width="100%"/>
	<content:EncryptionKeyView id="encView" enablePasswordGenerator="true"/>
	<s:Spacer height="100%"/>
	<s:HGroup width="100%" horizontalAlign="right">
		<s:Button label="Attach" click="attachDBButton_clickHandler(event)" toolTip="Select Database file"/>
		<s:Button label="Create" click="createDBButton_clickHandler(event)" toolTip="Create Database file"/>
		<s:Spacer width="15"/>
		<s:Button label="Cancel" click="closeButton_clickHandler(event)"/>
	</s:HGroup>
</s:Panel>
